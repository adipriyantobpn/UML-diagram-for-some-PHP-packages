@startuml
skinparam handwritten true
class yii.console.Application {
    +{static}OPTION_APPCONFIG = "appconfig"
    +controller : Controller
    +defaultRoute : string = "help"
    +enableCoreCommands : bool = true
    +coreCommands() : array
    +coreComponents()
    +getErrorHandler() : ErrorHandler
    +getRequest() : Request
    +getResponse() : Response
    +handleRequest(request : Request) : Response
    +init()
    #loadConfig(config : array) : array
    +runAction(route : string, params : array = []) : int|Response
    +__construct(config = [])
}
class yii.console.Application extends yii.base.Application
class yii.console.Controller {
    +{static}EXIT_CODE_ERROR = 1
    +{static}EXIT_CODE_NORMAL = 0
    +color : bool
    +help : bool
    +interactive : bool = true
    -_passedOptions : array = []
    -_reflections = []
    +ansiFormat(string : string) : string
    +bindActionParams(action : Action, params : array) : array
    +confirm(message : string, default : bool = false) : bool
    +getActionArgsHelp(action : Action) : array
    +getActionHelp(action : Action) : string
    +getActionHelpSummary(action : Action) : string
    #getActionMethodReflection(action : Action) : ReflectionMethod
    +getActionOptionsHelp(action : Action) : array
    +getHelp() : string
    +getHelpSummary() : string
    +getOptionValues(actionID : string) : array
    +getPassedOptions() : array
    +getPassedOptionValues() : array
    +isColorEnabled(stream : resource = null) : bool
    +optionAliases() : array
    +options(actionID : string) : string[]
    #parseDocCommentDetail(reflection : Reflector) : string
    #parseDocCommentSummary(reflection : Reflector) : string
    #parseDocCommentTags(reflection : Reflector) : array
    +prompt(text : string, options : array = []) : string
    +runAction(id : string, params : array = []) : int
    +select(prompt : string, options : array = []) : string
    +stderr(string : string) : int|bool
    +stdout(string : string) : int|bool
}
class yii.console.Controller extends yii.base.Controller
class yii.console.ErrorHandler {
    #formatMessage(message : string, format : array = [
        \t0 => "~~NOT RESOLVED~~",
        \t1 => "~~NOT RESOLVED~~"
    ]) : string
    #renderException(exception : Exception)
}
class yii.console.ErrorHandler extends yii.base.ErrorHandler
class yii.console.Exception {
    +getName() : string
}
class yii.console.Exception extends yii.base.UserException
class yii.console.ExitCode {
    +{static}CANTCREAT = 73
    +{static}CONFIG = 78
    +{static}DATAERR = 65
    +{static}IOERR = 74
    +{static}NOHOST = 68
    +{static}NOINPUT = 66
    +{static}NOPERM = 77
    +{static}NOUSER = 67
    +{static}OK = 0
    +{static}OSERR = 71
    +{static}OSFILE = 72
    +{static}PROTOCOL = 76
    +{static}SOFTWARE = 70
    +{static}TEMPFAIL = 75
    +{static}UNAVAILABLE = 69
    +{static}UNSPECIFIED_ERROR = 1
    +{static}USAGE = 64
    +reasons : array = [
        \t"~~NOT RESOLVED~~" => "Insufficient permissions",
        \t78 => "Configuration error"
    ]
    +{static}getReason(exitCode : int) : string
}
class yii.console.Markdown {
    #escapeCharacters : array = [
        \t0 => "\",
        \t1 => "`",
        \t2 => "*",
        \t3 => "_",
        \t4 => "~"
    ]
    #renderCode(block : array) : string
    #renderEmph(element : array) : string
    #renderInlineCode(element : array) : string
    #renderParagraph(block : string) : string
    #renderStrike(element : array) : string
    #renderStrong(element : array) : string
}
class yii.console.Markdown extends cebe.markdown.Parser
class yii.console.Request {
    -_params
    +getParams() : array
    +resolve() : array
    +setParams(params : array)
}
class yii.console.Request extends yii.base.Request
class yii.console.Response {
}
class yii.console.Response extends yii.base.Response
class yii.console.UnknownCommandException {
    #application : Application
    +command : string
    -filterBySimilarity(actions : array, command : string) : array
    +getName() : string
    +getSuggestedAlternatives() : array
    +__construct(route : string, application : Application, code : int = 0, previous : Exception = null)
}
class yii.console.UnknownCommandException extends yii.console.Exception
class yii.console.controllers.AssetController {
    +{static}EXIT_CODE_ERROR = 1
    +{static}EXIT_CODE_NORMAL = 0
    +bundles : array = []
    +cssCompressor : string|callable = "java -jar yuicompressor.jar --type css {from} -o {to}"
    +defaultAction : string = "compress"
    +deleteSource : bool = false
    +jsCompressor : string|callable = "java -jar compiler.jar --js {from} --js_output_file {to}"
    +targets : array = []
    -_assetManager : array|.yii.web.AssetManager = []
    +actionCompress(configFile : string, bundleFile : string)
    +actionTemplate(configFile : string) : int
    #adjustCssUrl(cssContent : string, inputFilePath : string, outputFilePath : string) : string
    #adjustDependency(targets : yii.web.AssetBundle[], bundles : yii.web.AssetBundle[]) : yii.web.AssetBundle[]
    #buildTarget(target : yii.web.AssetBundle, type : string, bundles : yii.web.AssetBundle[])
    +combineCssFiles(inputFiles : array, outputFile : string)
    +combineJsFiles(inputFiles : array, outputFile : string)
    -composeBundleConfig(bundle : AssetBundle) : array
    -composeCircularDependencyTrace(circularDependencyName : string, registered : array) : string
    #compressCssFiles(inputFiles : array, outputFile : string)
    #compressJsFiles(inputFiles : array, outputFile : string)
    -deletePublishedAssets(bundles : yii.web.AssetBundle[])
    -findRealPath(path : string) : string
    +getAssetManager() : yii.web.AssetManager
    -isBundleExternal(bundle : AssetBundle) : bool
    #loadBundles(bundles : string[]) : yii.web.AssetBundle[]
    #loadConfiguration(configFile : string)
    #loadDependency(bundle : yii.web.AssetBundle, result : array)
    #loadTargets(targets : array, bundles : yii.web.AssetBundle[]) : yii.web.AssetBundle[]
    #registerBundle(bundles : yii.web.AssetBundle[], name : string, registered : array)
    #saveTargets(targets : yii.web.AssetBundle[], bundleFile : string)
    +setAssetManager(assetManager : yii.web.AssetManager|array)
}
class yii.console.controllers.AssetController extends yii.console.Controller
abstract class yii.console.controllers.BaseMigrateController {
    +{static}BASE_MIGRATION = "m000000_000000_base"
    +{static}EXIT_CODE_ERROR = 1
    +{static}EXIT_CODE_NORMAL = 0
    +compact : bool = false
    +defaultAction : string = "up"
    +migrationNamespaces : array = []
    +migrationPath : string|array = [
        \t0 => "@app/migrations"
    ]
    +templateFile : string
    +actionCreate(name : string)
    +actionDown(limit : int|string = 1) : int
    +actionFresh()
    +actionHistory(limit : int|string = 10)
    +actionMark(version : string) : int
    +actionNew(limit : int|string = 10)
    +actionRedo(limit : int|string = 1) : int
    +actionTo(version : string)
    +actionUp(limit : int = 0) : int
    #addMigrationHistory(version : string)
    +beforeAction(action : yii.base.Action) : bool
    #createMigration(class : string) : yii.db.MigrationInterface
    -extractMigrationVersion(rawVersion : string) : string|false
    -extractNamespaceMigrationVersion(rawVersion : string) : string|false
    -findMigrationPath(namespace : string|null) : string
    -generateClassName(name : string) : array
    #generateMigrationSourceCode(params : array) : string
    #getMigrationHistory(limit : int) : array
    #getMigrationNameLimit() : int|null
    -getNamespacePath(namespace : string) : string
    #getNewMigrations() : array
    #includeMigrationFile(class : string)
    #migrateDown(class : string) : bool
    #migrateToTime(time : int)
    #migrateToVersion(version : string) : int
    #migrateUp(class : string) : bool
    +options(actionID)
    #removeMigrationHistory(version : string)
    #truncateDatabase()
}
class yii.console.controllers.BaseMigrateController extends yii.console.Controller
class yii.console.controllers.CacheController {
    +{static}EXIT_CODE_ERROR = 1
    +{static}EXIT_CODE_NORMAL = 0
    +actionFlush()
    +actionFlushAll()
    +actionFlushSchema(db : string = "db") : int
    +actionIndex()
    -canBeFlushed(className : string) : bool
    -confirmFlush(cachesNames : array) : bool
    -findCaches(cachesNames : array = []) : array
    -isCacheClass(className : string) : bool
    -notifyCachesCanBeFlushed(caches : array)
    -notifyFlushed(caches : array)
    -notifyNoCachesFound()
    -notifyNotFoundCaches(cachesNames : array)
}
class yii.console.controllers.CacheController extends yii.console.Controller
class yii.console.controllers.FixtureController {
    +{static}EXIT_CODE_ERROR = 1
    +{static}EXIT_CODE_NORMAL = 0
    +defaultAction : string = "load"
    +globalFixtures : array = [
        \t0 => "yii\test\InitDbFixture"
    ]
    +namespace : string = "tests\unit\fixtures"
    +actionLoad(fixturesInput : array = []) : int
    +actionUnload(fixturesInput : array = []) : int
    -confirmLoad(fixtures : array, except : array) : bool
    -confirmUnload(fixtures : array, except : array) : bool
    -filterFixtures(fixtures : array) : array
    -findFixtures(fixtures : array = []) : array
    -getFixturePath() : string
    -getFixtureRelativeName(fullFixturePath : string) : string
    -getFixturesConfig(fixtures : array) : array
    +needToApplyAll(fixture : string) : bool
    -notifyLoaded(fixtures : array)
    -notifyNotFound(fixtures : array)
    +notifyNothingToLoad(foundFixtures : array, except : array)
    +notifyNothingToUnload(foundFixtures : array, except : array)
    -notifyUnloaded(fixtures : array)
    +optionAliases()
    +options(actionID)
    -outputList(data : array)
}
class yii.console.controllers.FixtureController extends yii.console.Controller
class yii.console.controllers.HelpController {
    +{static}EXIT_CODE_ERROR = 1
    +{static}EXIT_CODE_NORMAL = 0
    +actionIndex(command : string = null) : int
    +actionList()
    +actionListActionOptions(action : string)
    +actionUsage(action : string)
    #formatOptionAliases(controller : Controller, option : string) : string
    #formatOptionHelp(name : string, required : bool, type : string, defaultValue : mixed, comment : string) : string
    +getActions(controller : Controller) : array
    #getCommandDescriptions() : array
    #getCommandHelp(controller : Controller)
    +getCommands() : array
    #getDefaultHelp()
    #getDefaultHelpHeader() : string
    #getModuleCommands(module : yii.base.Module) : array
    #getScriptName() : string
    #getSubCommandHelp(controller : Controller, actionID : string)
    #validateControllerClass(controllerClass : string) : bool
}
class yii.console.controllers.HelpController extends yii.console.Controller
class yii.console.controllers.MessageController {
    +{static}EXIT_CODE_ERROR = 1
    +{static}EXIT_CODE_NORMAL = 0
    +catalog : string = "messages"
    #config : array
    +db : string = "db"
    +defaultAction : string = "extract"
    +except : array = [
        \t0 => ".svn",
        \t1 => ".git",
        \t2 => ".gitignore",
        \t3 => ".gitkeep",
        \t4 => ".hgignore",
        \t5 => ".hgkeep",
        \t6 => "/messages",
        \t7 => "/BaseYii.php"
    ]
    +format : string = "php"
    +ignoreCategories : array = []
    +languages : array = []
    +markUnused : bool = true
    +messagePath : string = "@yii/messages"
    +messageTable : string = "{{%message}}"
    +only : array = [
        \t0 => "*.php"
    ]
    +overwrite : bool = true
    +phpDocBlock : string|null
    +phpFileHeader : string = ""
    +removeUnused : bool = false
    +sort : bool = false
    +sourceMessageTable : string = "{{%source_message}}"
    +sourcePath : string = "@yii"
    +translator : string = "Yii::t"
    +actionConfig(filePath : string) : int
    +actionConfigTemplate(filePath : string) : int
    +actionExtract(configFile : string = null)
    #extractMessages(fileName : string, translator : string, ignoreCategories : array = []) : array
    #extractMessagesFromTokens(tokens : array, translatorTokens : array, ignoreCategories : array) : array
    #getLine(tokens : array) : int|string
    #initConfig(configFile : string)
    #isCategoryIgnored(category : string, ignoreCategories : array) : bool
    +optionAliases()
    +options(actionID)
    #saveMessagesCategoryToPHP(messages : array, fileName : string, overwrite : bool, removeUnused : bool, sort : bool, category : string, markUnused : bool) : int
    #saveMessagesToDb(messages : array, db : Connection, sourceMessageTable : string, messageTable : string, removeUnused : bool, languages : array, markUnused : bool)
    #saveMessagesToPHP(messages : array, dirName : string, overwrite : bool, removeUnused : bool, sort : bool, markUnused : bool)
    #saveMessagesToPO(messages : array, dirName : string, overwrite : bool, removeUnused : bool, sort : bool, catalog : string, markUnused : bool)
    #saveMessagesToPOT(messages : array, dirName : string, catalog : string)
    #tokensEqual(a : array|string, b : array|string) : bool
}
class yii.console.controllers.MessageController extends yii.console.Controller
class yii.console.controllers.MigrateController {
    +{static}BASE_MIGRATION = "m000000_000000_base"
    +{static}EXIT_CODE_ERROR = 1
    +{static}EXIT_CODE_NORMAL = 0
    +{static}MAX_NAME_LENGTH = 180
    +db : Connection|array|string = "db"
    +fields : array = []
    +generatorTemplateFiles : array = [
        \t"create_table" => "@yii/views/createTableMigration.php",
        \t"drop_table" => "@yii/views/dropTableMigration.php",
        \t"add_column" => "@yii/views/addColumnMigration.php",
        \t"drop_column" => "@yii/views/dropColumnMigration.php",
        \t"create_junction" => "@yii/views/createTableMigration.php"
    ]
    +migrationTable : string = "{{%migration}}"
    +templateFile = "@yii/views/migration.php"
    +useTablePrefix : bool = false
    -_migrationNameLimit
    #addDefaultPrimaryKey(fields : array)
    #addMigrationHistory(version)
    +beforeAction(action : yii.base.Action) : bool
    #createMigration(class : string) : yii.db.Migration
    #createMigrationHistoryTable()
    #generateMigrationSourceCode(params)
    #generateTableName(tableName : string) : string
    #getMigrationHistory(limit)
    #getMigrationNameLimit()
    +optionAliases()
    +options(actionID)
    #parseFields() : array
    #removeMigrationHistory(version)
    #truncateDatabase()
}
class yii.console.controllers.MigrateController extends yii.console.controllers.BaseMigrateController
class yii.console.controllers.ServeController {
    +{static}EXIT_CODE_ADDRESS_TAKEN_BY_ANOTHER_PROCESS = 5
    +{static}EXIT_CODE_ADDRESS_TAKEN_BY_ANOTHER_SERVER = 4
    +{static}EXIT_CODE_ERROR = 1
    +{static}EXIT_CODE_NORMAL = 0
    +{static}EXIT_CODE_NO_DOCUMENT_ROOT = 2
    +{static}EXIT_CODE_NO_ROUTING_FILE = 3
    +docroot : string = "@app/web"
    +port : int = 8080
    +router : string
    +actionIndex(address : string = "localhost") : int
    #isAddressTaken(address : string) : bool
    +optionAliases()
    +options(actionID)
}
class yii.console.controllers.ServeController extends yii.console.Controller
class yii.console.widgets.Table {
    +{static}CHAR_BOTTOM = "bottom"
    +{static}CHAR_BOTTOM_LEFT = "bottom-left"
    +{static}CHAR_BOTTOM_MID = "bottom-mid"
    +{static}CHAR_BOTTOM_RIGHT = "bottom-right"
    +{static}CHAR_LEFT = "left"
    +{static}CHAR_LEFT_MID = "left-mid"
    +{static}CHAR_MID = "mid"
    +{static}CHAR_MIDDLE = "middle"
    +{static}CHAR_MID_MID = "mid-mid"
    +{static}CHAR_RIGHT = "right"
    +{static}CHAR_RIGHT_MID = "right-mid"
    +{static}CHAR_TOP = "top"
    +{static}CHAR_TOP_LEFT = "top-left"
    +{static}CHAR_TOP_MID = "top-mid"
    +{static}CHAR_TOP_RIGHT = "top-right"
    -_chars : array = [
        \t"~~NOT RESOLVED~~" => "╢",
        \t"middle" => "│"
    ]
    -_columnWidths : array = []
    -_headers : array = []
    -_listPrefix : string = "• "
    -_rows : array = []
    -_screenWidth : int
    #calculateRowHeight(row : array) : int
    #calculateRowsSize()
    #getScreenWidth() : int
    #renderRow(row : array, spanLeft : string, spanMiddle : string, spanRight : string) : string
    #renderSeparator(spanLeft : string, spanMid : string, spanMidMid : string, spanRight : string) : string
    +run() : string
    +setChars(chars : array) : $this
    +setHeaders(headers : array) : $this
    +setListPrefix(listPrefix : string) : $this
    +setRows(rows : array) : $this
    +setScreenWidth(width : int) : $this
}
class yii.console.widgets.Table extends yii.base.Widget
@enduml
