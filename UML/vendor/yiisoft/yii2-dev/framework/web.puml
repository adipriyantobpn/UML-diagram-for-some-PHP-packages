@startuml
skinparam handwritten true
class yii.web.Application {
    +catchAll : array
    +controller : Controller
    +defaultRoute : string = "site"
    -_homeUrl
    #bootstrap()
    +coreComponents()
    +getErrorHandler() : ErrorHandler
    +getHomeUrl() : string
    +getRequest() : Request
    +getResponse() : Response
    +getSession() : Session
    +getUser() : User
    +handleRequest(request : Request) : Response
    +setHomeUrl(value : string)
}
class yii.web.Application extends yii.base.Application
class yii.web.AssetBundle {
    +basePath : string
    +baseUrl : string
    +css : array = []
    +cssOptions : array = []
    +depends : array = []
    +js : array = []
    +jsOptions : array = []
    +publishOptions : array = []
    +sourcePath : string
    +init()
    +publish(am : AssetManager)
    +{static}register(view : View) : static
    +registerAssetFiles(view : yii.web.View)
}
class yii.web.AssetBundle extends yii.base.BaseObject
class yii.web.AssetConverter {
    +commands : array = [
        \t"less" => [
        \t    \t0 => "css",
        \t    \t1 => "lessc {from} {to} --no-color --source-map"
        \t],
        \t"scss" => [
        \t    \t0 => "css",
        \t    \t1 => "sass {from} {to} --sourcemap"
        \t],
        \t"sass" => [
        \t    \t0 => "css",
        \t    \t1 => "sass {from} {to} --sourcemap"
        \t],
        \t"styl" => [
        \t    \t0 => "css",
        \t    \t1 => "stylus < {from} > {to}"
        \t],
        \t"coffee" => [
        \t    \t0 => "js",
        \t    \t1 => "coffee -p {from} > {to}"
        \t],
        \t"ts" => [
        \t    \t0 => "js",
        \t    \t1 => "tsc --out {to} {from}"
        \t]
    ]
    +forceConvert : bool = false
    +convert(asset : string, basePath : string) : string
    #runCommand(command : string, basePath : string, asset : string, result : string) : bool
}
class yii.web.AssetConverter extends yii.base.Component
class yii.web.AssetConverter implements yii.web.AssetConverterInterface
interface yii.web.AssetConverterInterface {
    +convert(asset : string, basePath : string) : string
}
class yii.web.AssetManager {
    +afterCopy : callback
    +appendTimestamp : bool = false
    +assetMap : array = []
    +basePath : string = "@webroot/assets"
    +baseUrl : string = "@web/assets"
    +beforeCopy : callback
    +bundles : array|bool = []
    +dirMode : int = 509
    +fileMode : int
    +forceCopy : bool = false
    +hashCallback : callable
    +linkAssets : bool = false
    -_converter
    -_dummyBundles = []
    -_published : array = []
    +getAssetPath(bundle : AssetBundle, asset : string) : string|false
    +getAssetUrl(bundle : AssetBundle, asset : string) : string
    +getBundle(name : string, publish : bool = true) : AssetBundle
    +getConverter() : AssetConverterInterface
    +getPublishedPath(path : string) : string|false
    +getPublishedUrl(path : string) : string|false
    #hash(path : string) : string
    +init()
    #loadBundle(name : string, config : array = [], publish : bool = true) : AssetBundle
    #loadDummyBundle(name : string) : AssetBundle
    +publish(path : string, options : array = []) : array
    #publishDirectory(src : string, options : array) : string[]
    #publishFile(src : string) : string[]
    #resolveAsset(bundle : AssetBundle, asset : string) : string|bool
    +setConverter(value : array|AssetConverterInterface)
}
class yii.web.AssetManager extends yii.base.Component
class yii.web.BadRequestHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.BadRequestHttpException extends yii.web.HttpException
class yii.web.CacheSession {
    +cache : CacheInterface|array|string = "cache"
    #calculateKey(id : string) : mixed
    +destroySession(id : string) : bool
    +getUseCustomStorage() : bool
    +init()
    +readSession(id : string) : string
    +writeSession(id : string, data : string) : bool
}
class yii.web.CacheSession extends yii.web.Session
abstract class yii.web.CompositeUrlRule {
    #createStatus : int|null
    #rules : UrlRuleInterface[] = []
    #createRules() : UrlRuleInterface[]
    +createUrl(manager, route, params)
    +getCreateUrlStatus() : null|int
    +init()
    #iterateRules(rules : UrlRuleInterface[], manager : UrlManager, route : string, params : array) : bool|string
    +parseRequest(manager, request)
}
class yii.web.CompositeUrlRule extends yii.base.BaseObject
class yii.web.CompositeUrlRule implements yii.web.UrlRuleInterface
class yii.web.ConflictHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.ConflictHttpException extends yii.web.HttpException
class yii.web.Controller {
    +actionParams : array = []
    +enableCsrfValidation : bool = true
    +asJson(data : mixed) : Response
    +asXml(data : mixed) : Response
    +beforeAction(action)
    +bindActionParams(action : yii.base.Action, params : array) : array
    +goBack(defaultUrl : string|array = null) : Response
    +goHome() : Response
    +redirect(url : string|array, statusCode : int = 302) : Response
    +refresh(anchor : string = "") : Response
    +renderAjax(view : string, params : array = []) : string
}
class yii.web.Controller extends yii.base.Controller
class yii.web.Cookie {
    +domain : string = ""
    +expire : int = 0
    +httpOnly : bool = true
    +name : string
    +path : string = "/"
    +secure : bool = false
    +value : string = ""
    +__toString() : string
}
class yii.web.Cookie extends yii.base.BaseObject
class yii.web.CookieCollection {
    +readOnly : bool = false
    -_cookies : Cookie[]
    +add(cookie : Cookie)
    +count() : int
    +fromArray(array : array)
    +get(name : string) : Cookie
    +getCount() : int
    +getIterator() : ArrayIterator
    +getValue(name : string, defaultValue : mixed = null) : mixed
    +has(name : string) : bool
    +offsetExists(name : string) : bool
    +offsetGet(name : string) : Cookie
    +offsetSet(name : string, cookie : Cookie)
    +offsetUnset(name : string)
    +remove(cookie : Cookie|string, removeFromBrowser : bool = true)
    +removeAll()
    +toArray() : array
    +__construct(cookies : array = [], config : array = [])
}
class yii.web.CookieCollection extends yii.base.BaseObject
class yii.web.CookieCollection implements IteratorAggregate
class yii.web.CookieCollection implements ArrayAccess
class yii.web.CookieCollection implements Countable
class yii.web.DbSession {
    +db : Connection|array|string = "db"
    +sessionTable : string = "{{%session}}"
    +destroySession(id : string) : bool
    +gcSession(maxLifetime : int) : bool
    +init()
    +readSession(id : string) : string
    +regenerateID(deleteOldSession : bool = false)
    #typecastFields(fields : array) : array
    +writeSession(id : string, data : string) : bool
}
class yii.web.DbSession extends yii.web.MultiFieldSession
class yii.web.ErrorAction {
    +defaultMessage : string
    +defaultName : string
    #exception : Exception
    +view : string
    #findException() : Exception
    #getExceptionCode() : mixed
    #getExceptionMessage() : string
    #getExceptionName() : string
    #getViewRenderParams() : array
    +init()
    #renderAjaxResponse() : string
    #renderHtmlResponse() : string
    +run() : string
}
class yii.web.ErrorAction extends yii.base.Action
class yii.web.ErrorHandler {
    +callStackItemView : string = "@yii/views/errorHandler/callStackItem.php"
    +displayVars : array = [
        \t0 => "_GET",
        \t1 => "_POST",
        \t2 => "_FILES",
        \t3 => "_COOKIE",
        \t4 => "_SESSION"
    ]
    +errorAction : string
    +errorView : string = "@yii/views/errorHandler/error.php"
    +exceptionView : string = "@yii/views/errorHandler/exception.php"
    +maxSourceLines : int = 19
    +maxTraceSourceLines : int = 13
    +previousExceptionView : string = "@yii/views/errorHandler/previousException.php"
    +addTypeLinks(code : string) : string
    +argumentsToString(args : array) : string
    #convertExceptionToArray(exception : Exception|.Error) : array
    +createFrameworkVersionLink() : string
    +createHttpStatusLink(statusCode : int, statusDescription : string) : string
    +createServerInformationLink() : string
    +getExceptionName(exception : Exception) : string
    #getTypeUrl(class : string, method : string|null) : string|null
    +htmlEncode(text : string) : string
    +isCoreFile(file : string) : bool
    +renderCallStack(exception : Exception|.ParseError) : string
    +renderCallStackItem(file : string|null, line : int|null, class : string|null, method : string|null, args : array, index : int) : string
    #renderException(exception : Exception|.Error)
    +renderFile(_file_ : string, _params_ : array) : string
    +renderPreviousExceptions(exception : Exception) : string
    +renderRequest() : string
    #shouldRenderSimpleHtml() : bool
}
class yii.web.ErrorHandler extends yii.base.ErrorHandler
class yii.web.ForbiddenHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.ForbiddenHttpException extends yii.web.HttpException
class yii.web.GoneHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.GoneHttpException extends yii.web.HttpException
class yii.web.GroupUrlRule {
    +prefix : string
    +routePrefix : string
    +ruleConfig : array = [
        \t"class" => "yii\web\UrlRule"
    ]
    +rules : array = []
    #createRules()
    +createUrl(manager, route, params)
    +init()
    +parseRequest(manager, request)
}
class yii.web.GroupUrlRule extends yii.web.CompositeUrlRule
class yii.web.HeaderCollection {
    -_headers : array = []
    +add(name : string, value : string) : $this
    +count() : int
    +fromArray(array : array)
    +get(name : string, default : mixed = null, first : bool = true) : string|array
    +getCount() : int
    +getIterator() : ArrayIterator
    +has(name : string) : bool
    +offsetExists(name : string) : bool
    +offsetGet(name : string) : string
    +offsetSet(name : string, value : string)
    +offsetUnset(name : string)
    +remove(name : string) : array
    +removeAll()
    +set(name : string, value : string = "") : $this
    +setDefault(name : string, value : string) : $this
    +toArray() : array
}
class yii.web.HeaderCollection extends yii.base.BaseObject
class yii.web.HeaderCollection implements IteratorAggregate
class yii.web.HeaderCollection implements ArrayAccess
class yii.web.HeaderCollection implements Countable
class yii.web.HtmlResponseFormatter {
    +contentType : string = "text/html"
    +format(response : Response)
}
class yii.web.HtmlResponseFormatter extends yii.base.Component
class yii.web.HtmlResponseFormatter implements yii.web.ResponseFormatterInterface
class yii.web.HttpException {
    +statusCode : int
    +getName() : string
    +__construct(status : int, message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.HttpException extends yii.base.UserException
interface yii.web.IdentityInterface {
    +{static}findIdentity(id : string|int) : IdentityInterface
    +{static}findIdentityByAccessToken(token : mixed, type : mixed = null) : IdentityInterface
    +getAuthKey() : string
    +getId() : string|int
    +validateAuthKey(authKey : string) : bool
}
class yii.web.JqueryAsset {
    +js = [
        \t0 => "jquery.js"
    ]
    +sourcePath = "@bower/jquery/dist"
}
class yii.web.JqueryAsset extends yii.web.AssetBundle
class yii.web.JsExpression {
    +expression : string
    +__construct(expression : string, config : array = [])
    +__toString() : string
}
class yii.web.JsExpression extends yii.base.BaseObject
class yii.web.JsonParser {
    +asArray : bool = true
    +throwException : bool = true
    +parse(rawBody : string, contentType : string) : array
}
class yii.web.JsonParser implements yii.web.RequestParserInterface
class yii.web.JsonResponseFormatter {
    +encodeOptions : int = 320
    +prettyPrint : bool = false
    +useJsonp : bool = false
    +format(response : Response)
    #formatJson(response : Response)
    #formatJsonp(response : Response)
}
class yii.web.JsonResponseFormatter extends yii.base.Component
class yii.web.JsonResponseFormatter implements yii.web.ResponseFormatterInterface
class yii.web.Link {
    +{static}REL_SELF = "self"
    +href : string
    +hreflang : string
    +name : string
    +profile : string
    +templated : bool = false
    +title : string
    +type : string
    +{static}serialize(links : array) : array
}
class yii.web.Link extends yii.base.BaseObject
interface yii.web.Linkable {
    +getLinks() : array
}
class yii.web.MethodNotAllowedHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.MethodNotAllowedHttpException extends yii.web.HttpException
abstract class yii.web.MultiFieldSession {
    +readCallback : callable
    +writeCallback : callable
    #composeFields(id : string, data : string) : array
    #extractData(fields : array) : string
    +getUseCustomStorage() : bool
}
class yii.web.MultiFieldSession extends yii.web.Session
class yii.web.MultipartFormDataParser {
    +force : bool = false
    -_uploadFileMaxCount : int
    -_uploadFileMaxSize : int
    -addFile(files : array, name : string, info : array)
    -addValue(array : array, name : string, value : mixed)
    -getByteSize(verboseSize : string) : int
    +getUploadFileMaxCount() : int
    +getUploadFileMaxSize() : int
    +parse(rawBody, contentType)
    -parseHeaders(headerContent : string) : array
    +setUploadFileMaxCount(uploadFileMaxCount : int)
    +setUploadFileMaxSize(uploadFileMaxSize : int)
}
class yii.web.MultipartFormDataParser extends yii.base.BaseObject
class yii.web.MultipartFormDataParser implements yii.web.RequestParserInterface
class yii.web.NotAcceptableHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.NotAcceptableHttpException extends yii.web.HttpException
class yii.web.NotFoundHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.NotFoundHttpException extends yii.web.HttpException
class yii.web.RangeNotSatisfiableHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.RangeNotSatisfiableHttpException extends yii.web.HttpException
class yii.web.Request {
    +{static}CSRF_HEADER = "X-CSRF-Token"
    +{static}CSRF_MASK_LENGTH = 8
    +cookieValidationKey : string
    +csrfCookie : array = [
        \t"httpOnly" => true
    ]
    +csrfParam : string = "_csrf"
    +enableCookieValidation : bool = true
    +enableCsrfCookie : bool = true
    +enableCsrfValidation : bool = true
    +ipHeaders : string[] = [
        \t0 => "X-Forwarded-For"
    ]
    +methodParam : string = "_method"
    +parsers : array = []
    +secureHeaders : array = [
        \t0 => "X-Forwarded-For",
        \t1 => "X-Forwarded-Host",
        \t2 => "X-Forwarded-Proto",
        \t3 => "Front-End-Https",
        \t4 => "X-Rewrite-Url"
    ]
    +secureProtocolHeaders : array = [
        \t"X-Forwarded-Proto" => [
        \t    \t0 => "https"
        \t],
        \t"Front-End-Https" => [
        \t    \t0 => "on"
        \t]
    ]
    +trustedHosts : array = []
    -_baseUrl
    -_bodyParams
    -_contentTypes
    -_cookies : CookieCollection
    -_csrfToken
    -_headers : HeaderCollection
    -_hostInfo
    -_hostName
    -_languages
    -_pathInfo
    -_port
    -_queryParams
    -_rawBody
    -_scriptFile
    -_scriptUrl
    -_securePort
    -_url
    #createCsrfCookie(token : string) : Cookie
    #filterHeaders(headerCollection : yii.web.HeaderCollection)
    #generateCsrfToken() : string
    +get(name : string = null, defaultValue : mixed = null) : array|mixed
    +getAbsoluteUrl() : string
    +getAcceptableContentTypes() : array
    +getAcceptableLanguages() : array
    +getAuthCredentials() : array
    +getAuthPassword() : string|null
    +getAuthUser() : string|null
    +getBaseUrl() : string
    +getBodyParam(name : string, defaultValue : mixed = null) : mixed
    +getBodyParams() : array
    +getContentType() : string
    +getCookies() : CookieCollection
    +getCsrfToken(regenerate : bool = false) : string
    +getCsrfTokenFromHeader() : string
    +getETags() : array
    +getHeaders() : HeaderCollection
    +getHostInfo() : string|null
    +getHostName() : string|null
    #getIpValidator() : yii.validators.IpValidator
    +getIsAjax() : bool
    +getIsDelete() : bool
    +getIsFlash() : bool
    +getIsGet() : bool
    +getIsHead() : bool
    +getIsOptions() : bool
    +getIsPatch() : bool
    +getIsPjax() : bool
    +getIsPost() : bool
    +getIsPut() : bool
    +getIsSecureConnection() : bool
    +getMethod() : string
    +getOrigin() : string|null
    +getPathInfo() : string
    +getPort() : int
    +getPreferredLanguage(languages : array = []) : string
    +getQueryParam(name : string, defaultValue : mixed = null) : mixed
    +getQueryParams() : array
    +getQueryString() : string
    +getRawBody() : string
    +getReferrer() : string|null
    +getRemoteHost() : string|null
    +getRemoteIP() : string|null
    +getScriptFile() : string
    +getScriptUrl() : string
    +getSecurePort() : int
    +getServerName() : string
    +getServerPort() : int|null
    +getUrl() : string
    +getUserAgent() : string|null
    +getUserHost() : string|null
    +getUserIP() : string|null
    #loadCookies() : array
    #loadCsrfToken() : string
    +parseAcceptHeader(header : string) : array
    +post(name : string = null, defaultValue : mixed = null) : array|mixed
    +resolve() : array
    #resolvePathInfo() : string
    #resolveRequestUri() : string|bool
    +setAcceptableContentTypes(value : array)
    +setAcceptableLanguages(value : array)
    +setBaseUrl(value : string)
    +setBodyParams(values : array)
    +setHostInfo(value : string|null)
    +setPathInfo(value : string)
    +setPort(value : int)
    +setQueryParams(values : array)
    +setRawBody(rawBody : string)
    +setScriptFile(value : string)
    +setScriptUrl(value : string)
    +setSecurePort(value : int)
    +setUrl(value : string)
    +validateCsrfToken(clientSuppliedToken : string = null) : bool
    -validateCsrfTokenInternal(clientSuppliedToken : string, trueToken : string) : bool
}
class yii.web.Request extends yii.base.Request
interface yii.web.RequestParserInterface {
    +parse(rawBody : string, contentType : string) : array
}
class yii.web.Response {
    +{static}EVENT_AFTER_PREPARE = "afterPrepare"
    +{static}EVENT_AFTER_SEND = "afterSend"
    +{static}EVENT_BEFORE_SEND = "beforeSend"
    +{static}FORMAT_HTML = "html"
    +{static}FORMAT_JSON = "json"
    +{static}FORMAT_JSONP = "jsonp"
    +{static}FORMAT_RAW = "raw"
    +{static}FORMAT_XML = "xml"
    +acceptMimeType : string
    +acceptParams : array = []
    +charset : string
    +content : string
    +data : mixed
    +format : string = "html"
    +formatters : array = []
    +httpStatuses : array = [
        \t100 => "Continue",
        \t101 => "Switching Protocols",
        \t102 => "Processing",
        \t118 => "Connection timed out",
        \t200 => "OK",
        \t201 => "Created",
        \t202 => "Accepted",
        \t203 => "Non-Authoritative",
        \t204 => "No Content",
        \t205 => "Reset Content",
        \t206 => "Partial Content",
        \t207 => "Multi-Status",
        \t208 => "Already Reported",
        \t210 => "Content Different",
        \t226 => "IM Used",
        \t300 => "Multiple Choices",
        \t301 => "Moved Permanently",
        \t302 => "Found",
        \t303 => "See Other",
        \t304 => "Not Modified",
        \t305 => "Use Proxy",
        \t306 => "Reserved",
        \t307 => "Temporary Redirect",
        \t308 => "Permanent Redirect",
        \t310 => "Too many Redirect",
        \t400 => "Bad Request",
        \t401 => "Unauthorized",
        \t402 => "Payment Required",
        \t403 => "Forbidden",
        \t404 => "Not Found",
        \t405 => "Method Not Allowed",
        \t406 => "Not Acceptable",
        \t407 => "Proxy Authentication Required",
        \t408 => "Request Time-out",
        \t409 => "Conflict",
        \t410 => "Gone",
        \t411 => "Length Required",
        \t412 => "Precondition Failed",
        \t413 => "Request Entity Too Large",
        \t414 => "Request-URI Too Long",
        \t415 => "Unsupported Media Type",
        \t416 => "Requested range unsatisfiable",
        \t417 => "Expectation failed",
        \t418 => "I'm a teapot",
        \t421 => "Misdirected Request",
        \t422 => "Unprocessable entity",
        \t423 => "Locked",
        \t424 => "Method failure",
        \t425 => "Unordered Collection",
        \t426 => "Upgrade Required",
        \t428 => "Precondition Required",
        \t429 => "Too Many Requests",
        \t431 => "Request Header Fields Too Large",
        \t449 => "Retry With",
        \t450 => "Blocked by Windows Parental Controls",
        \t451 => "Unavailable For Legal Reasons",
        \t500 => "Internal Server Error",
        \t501 => "Not Implemented",
        \t502 => "Bad Gateway or Proxy Error",
        \t503 => "Service Unavailable",
        \t504 => "Gateway Time-out",
        \t505 => "HTTP Version not supported",
        \t507 => "Insufficient storage",
        \t508 => "Loop Detected",
        \t509 => "Bandwidth Limit Exceeded",
        \t510 => "Not Extended",
        \t511 => "Network Authentication Required"
    ]
    +isSent : bool = false
    +statusText : string = "OK"
    +stream : resource|array
    +version : string
    -_cookies
    -_headers : HeaderCollection
    -_statusCode : int = 200
    +clear()
    #defaultFormatters() : array
    +getCookies() : CookieCollection
    #getDispositionHeaderValue(disposition : string, attachmentName : string) : string
    +getHeaders() : HeaderCollection
    #getHttpRange(fileSize : int) : array|bool
    +getIsClientError() : bool
    +getIsEmpty() : bool
    +getIsForbidden() : bool
    +getIsInformational() : bool
    +getIsInvalid() : bool
    +getIsNotFound() : bool
    +getIsOk() : bool
    +getIsRedirection() : bool
    +getIsServerError() : bool
    +getIsSuccessful() : bool
    +getStatusCode() : int
    +init()
    #prepare()
    +redirect(url : string|array, statusCode : int = 302, checkAjax : bool = true) : $this
    +refresh(anchor : string = "") : Response
    +send()
    #sendContent()
    +sendContentAsFile(content : string, attachmentName : string, options : array = []) : $this
    #sendCookies()
    +sendFile(filePath : string, attachmentName : string = null, options : array = []) : $this
    #sendHeaders()
    +sendStreamAsFile(handle : resource, attachmentName : string, options : array = []) : $this
    +setDownloadHeaders(attachmentName : string, mimeType : string = null, inline : bool = false, contentLength : int = null) : $this
    +setStatusCode(value : int, text : string = null) : $this
    +setStatusCodeByException(e : Exception|.Error) : $this
    +xSendFile(filePath : string, attachmentName : string = null, options : array = []) : $this
}
class yii.web.Response extends yii.base.Response
interface yii.web.ResponseFormatterInterface {
    +format(response : Response)
}
class yii.web.ServerErrorHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.ServerErrorHttpException extends yii.web.HttpException
class yii.web.Session {
    +flashParam : string = "__flash"
    +handler : SessionHandlerInterface|array
    -_cookieParams : array = [
        \t"httponly" => true
    ]
    -_hasSessionId
    +addFlash(key : string, value : mixed = true, removeAfterAccess : bool = true)
    +close()
    +closeSession() : bool
    +count() : int
    +destroy()
    +destroySession(id : string) : bool
    +gcSession(maxLifetime : int) : bool
    +get(key : string, defaultValue : mixed = null) : mixed
    +getAllFlashes(delete : bool = false) : array
    +getCookieParams() : array
    +getCount() : int
    +getFlash(key : string, defaultValue : mixed = null, delete : bool = false) : mixed
    +getGCProbability() : float
    +getHasSessionId() : bool
    +getId() : string
    +getIsActive() : bool
    +getIterator() : SessionIterator
    +getName() : string
    +getSavePath() : string
    +getTimeout() : int
    +getUseCookies() : bool|null
    +getUseCustomStorage() : bool
    +getUseTransparentSessionID() : bool
    +has(key : mixed) : bool
    +hasFlash(key : string) : bool
    +init()
    +offsetExists(offset : mixed) : bool
    +offsetGet(offset : int) : mixed
    +offsetSet(offset : int, item : mixed)
    +offsetUnset(offset : mixed)
    +open()
    +openSession(savePath : string, sessionName : string) : bool
    +readSession(id : string) : string
    +regenerateID(deleteOldSession : bool = false)
    #registerSessionHandler()
    +remove(key : string) : mixed
    +removeAll()
    +removeAllFlashes()
    +removeFlash(key : string) : mixed
    +set(key : string, value : mixed)
    +setCookieParams(value : array)
    -setCookieParamsInternal()
    +setFlash(key : string, value : mixed = true, removeAfterAccess : bool = true)
    +setGCProbability(value : float)
    +setHasSessionId(value : bool)
    +setId(value : string)
    +setName(value : string)
    +setSavePath(value : string)
    +setTimeout(value : int)
    +setUseCookies(value : bool|null)
    +setUseTransparentSessionID(value : bool)
    #updateFlashCounters()
    +writeSession(id : string, data : string) : bool
}
class yii.web.Session extends yii.base.Component
class yii.web.Session implements IteratorAggregate
class yii.web.Session implements ArrayAccess
class yii.web.Session implements Countable
class yii.web.SessionIterator {
    -_key : mixed
    -_keys : array
    +current() : mixed
    +key() : mixed
    +next()
    +rewind()
    +valid() : bool
    +__construct()
}
class yii.web.SessionIterator implements Iterator
class yii.web.TooManyRequestsHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.TooManyRequestsHttpException extends yii.web.HttpException
class yii.web.UnauthorizedHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.UnauthorizedHttpException extends yii.web.HttpException
class yii.web.UnprocessableEntityHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.UnprocessableEntityHttpException extends yii.web.HttpException
class yii.web.UnsupportedMediaTypeHttpException {
    +__construct(message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.UnsupportedMediaTypeHttpException extends yii.web.HttpException
class yii.web.UploadedFile {
    +error : int
    +name : string
    +size : int
    +tempName : string
    +type : string
    -_files
    +getBaseName() : string
    +getExtension() : string
    +getHasError() : bool
    +{static}getInstance(model : yii.base.Model, attribute : string) : UploadedFile
    +{static}getInstanceByName(name : string) : null|UploadedFile
    +{static}getInstances(model : yii.base.Model, attribute : string) : UploadedFile[]
    +{static}getInstancesByName(name : string) : UploadedFile[]
    -{static}loadFiles() : array
    -{static}loadFilesRecursive(key : string, names : mixed, tempNames : mixed, types : mixed, sizes : mixed, errors : mixed)
    +{static}reset()
    +saveAs(file : string, deleteTempFile : bool = true) : bool
    +__toString() : string
}
class yii.web.UploadedFile extends yii.base.BaseObject
class yii.web.UrlManager {
    +cache : CacheInterface|string = "cache"
    #cacheKey : string = "yii\web\UrlManager"
    +enablePrettyUrl : bool = false
    +enableStrictParsing : bool = false
    +normalizer : UrlNormalizer|array|string|false = false
    +routeParam : string = "r"
    +ruleConfig : array = [
        \t"class" => "yii\web\UrlRule"
    ]
    +rules : array = []
    +showScriptName : bool = true
    +suffix : string
    -_baseUrl
    -_hostInfo
    -_ruleCache
    -_scriptUrl
    +addRules(rules : array, append : bool = true)
    #buildRules(rules : array) : UrlRuleInterface[]
    #canBeCached(rule : yii.web.UrlRuleInterface) : bool
    +createAbsoluteUrl(params : string|array, scheme : string|null = null) : string
    +createUrl(params : string|array) : string
    +getBaseUrl() : string
    +getHostInfo() : string
    +getScriptUrl() : string
    #getUrlFromCache(cacheKey : string, route : string, params : array) : bool|string
    +init()
    +parseRequest(request : Request) : array|bool
    +setBaseUrl(value : string)
    +setHostInfo(value : string)
    #setRuleToCache(cacheKey, rule : yii.web.UrlRuleInterface)
    +setScriptUrl(value : string)
}
class yii.web.UrlManager extends yii.base.Component
class yii.web.UrlNormalizer {
    +{static}ACTION_NOT_FOUND = 404
    +{static}ACTION_REDIRECT_PERMANENT = 301
    +{static}ACTION_REDIRECT_TEMPORARY = 302
    +action : int|callable|null = 301
    +collapseSlashes : bool = true
    +normalizeTrailingSlash : bool = true
    #collapseSlashes(pathInfo : string) : string
    +normalizePathInfo(pathInfo : string, suffix : string, normalized : bool = false) : string
    +normalizeRoute(route : array) : array
    #normalizeTrailingSlash(pathInfo : string, suffix : string) : string
}
class yii.web.UrlNormalizer extends yii.base.BaseObject
class yii.web.UrlNormalizerRedirectException {
    +scheme : bool|string
    +statusCode : int
    +url : array|string
    +__construct(url : array|string, statusCode : int = 302, scheme : bool|string = false, message : string = null, code : int = 0, previous : Exception = null)
}
class yii.web.UrlNormalizerRedirectException extends yii.base.Exception
class yii.web.UrlRule {
    +{static}CREATE_STATUS_PARAMS_MISMATCH = 4
    +{static}CREATE_STATUS_PARSING_ONLY = 1
    +{static}CREATE_STATUS_ROUTE_MISMATCH = 2
    +{static}CREATE_STATUS_SUCCESS = 0
    +{static}CREATION_ONLY = 2
    +{static}PARSING_ONLY = 1
    #createStatus : int|null
    +defaults : array = []
    +encodeParams : bool = true
    +host : string
    +mode : int
    +name : string
    +normalizer : UrlNormalizer|array|false|null
    +pattern : string
    #placeholders : array = []
    +route : string
    +suffix : string
    +verb : string|array
    -_paramRules : array = []
    -_routeParams : array = []
    -_routeRule : string
    -_template : string
    +createUrl(manager : UrlManager, route : string, params : array) : string|bool
    +getCreateUrlStatus() : null|int
    #getNormalizer(manager : UrlManager) : UrlNormalizer|null
    #getParamRules() : array
    #hasNormalizer(manager : UrlManager) : bool
    +init()
    +parseRequest(manager : UrlManager, request : Request) : array|bool
    -preparePattern()
    #substitutePlaceholderNames(matches : array) : array
    -translatePattern(allowAppendSlash : bool)
    -trimSlashes(string : string) : string
    +__toString() : string
}
class yii.web.UrlRule extends yii.base.BaseObject
class yii.web.UrlRule implements yii.web.UrlRuleInterface
interface yii.web.UrlRuleInterface {
    +createUrl(manager : UrlManager, route : string, params : array) : string|bool
    +parseRequest(manager : UrlManager, request : Request) : array|bool
}
class yii.web.User {
    +{static}EVENT_AFTER_LOGIN = "afterLogin"
    +{static}EVENT_AFTER_LOGOUT = "afterLogout"
    +{static}EVENT_BEFORE_LOGIN = "beforeLogin"
    +{static}EVENT_BEFORE_LOGOUT = "beforeLogout"
    +absoluteAuthTimeout : int
    +absoluteAuthTimeoutParam : string = "__absoluteExpire"
    +acceptableRedirectTypes : array = [
        \t0 => "text/html",
        \t1 => "application/xhtml+xml"
    ]
    +accessChecker : yii.rbac.CheckAccessInterface
    +authTimeout : int
    +authTimeoutParam : string = "__expire"
    +autoRenewCookie : bool = true
    +enableAutoLogin : bool = false
    +enableSession : bool = true
    +identityClass : string
    +identityCookie : array = [
        \t"name" => "_identity",
        \t"httpOnly" => true
    ]
    +idParam : string = "__id"
    +loginUrl : string|array = [
        \t0 => "site/login"
    ]
    +returnUrlParam : string = "__returnUrl"
    -_access = []
    -_identity = false
    #afterLogin(identity : IdentityInterface, cookieBased : bool, duration : int)
    #afterLogout(identity : IdentityInterface)
    #beforeLogin(identity : IdentityInterface, cookieBased : bool, duration : int) : bool
    #beforeLogout(identity : IdentityInterface) : bool
    +can(permissionName : string, params : array = [], allowCaching : bool = true) : bool
    #checkRedirectAcceptable() : bool
    #getAccessChecker() : yii.rbac.CheckAccessInterface
    #getAuthManager() : yii.rbac.ManagerInterface
    +getId() : string|int
    +getIdentity(autoRenew : bool = true) : IdentityInterface|null
    #getIdentityAndDurationFromCookie() : array|null
    +getIsGuest() : bool
    +getReturnUrl(defaultUrl : string|array = null) : string
    +init()
    +login(identity : yii.web.IdentityInterface, duration : int = 0) : bool
    +loginByAccessToken(token : string, type : mixed = null) : IdentityInterface|null
    #loginByCookie()
    +loginRequired(checkAjax : bool = true, checkAcceptHeader : bool = true) : Response
    +logout(destroySession : bool = true) : bool
    #removeIdentityCookie()
    #renewAuthStatus()
    #renewIdentityCookie()
    #sendIdentityCookie(identity : IdentityInterface, duration : int)
    +setIdentity(identity : IdentityInterface|null)
    +setReturnUrl(url : string|array)
    +switchIdentity(identity : IdentityInterface|null, duration : int = 0)
}
class yii.web.User extends yii.base.Component
class yii.web.UserEvent {
    +cookieBased : bool
    +duration : int
    +identity : IdentityInterface
    +isValid : bool = true
}
class yii.web.UserEvent extends yii.base.Event
class yii.web.View {
    +{static}EVENT_BEGIN_BODY = "beginBody"
    +{static}EVENT_END_BODY = "endBody"
    +{static}PH_BODY_BEGIN = "<![CDATA[YII-BLOCK-BODY-BEGIN]]>"
    +{static}PH_BODY_END = "<![CDATA[YII-BLOCK-BODY-END]]>"
    +{static}PH_HEAD = "<![CDATA[YII-BLOCK-HEAD]]>"
    +{static}POS_BEGIN = 2
    +{static}POS_END = 3
    +{static}POS_HEAD = 1
    +{static}POS_LOAD = 5
    +{static}POS_READY = 4
    +assetBundles : AssetBundle[] = []
    +css : array = []
    +cssFiles : array = []
    +js : array = []
    +jsFiles : array = []
    +linkTags : array = []
    +metaTags : array = []
    +title : string
    -_assetManager
    +beginBody()
    +clear()
    +endBody()
    +endPage(ajaxMode : bool = false)
    +getAssetManager() : yii.web.AssetManager
    +head()
    +registerAssetBundle(name : string, position : int|null = null) : AssetBundle
    #registerAssetFiles(name : string)
    +registerCsrfMetaTags()
    +registerCss(css : string, options : array = [], key : string = null)
    +registerCssFile(url : string, options : array = [], key : string = null)
    +registerJs(js : string, position : int = 4, key : string = null)
    +registerJsFile(url : string, options : array = [], key : string = null)
    +registerLinkTag(options : array, key : string = null)
    +registerMetaTag(options : array, key : string = null)
    +renderAjax(view : string, params : array = [], context : object = null) : string
    #renderBodyBeginHtml() : string
    #renderBodyEndHtml(ajaxMode : bool) : string
    #renderHeadHtml() : string
    +setAssetManager(value : yii.web.AssetManager)
}
class yii.web.View extends yii.base.View
class yii.web.ViewAction {
    +defaultView : string = "index"
    +layout : mixed
    +viewParam : string = "view"
    +viewPrefix : string = "pages"
    #render(viewName : string) : string
    #resolveViewName() : string
    +run()
}
class yii.web.ViewAction extends yii.base.Action
class yii.web.XmlResponseFormatter {
    +contentType : string = "application/xml"
    +encoding : string
    +itemTag : string = "item"
    +rootTag : string = "response"
    +useObjectTags : bool = true
    +useTraversableAsArray : bool = true
    +version : string = 1.0
    #buildXml(element : DOMElement, data : mixed)
    +format(response : Response)
    #formatScalarValue(value : int|string|bool|float) : string
    #getValidXmlElementName(name : mixed) : string
    #isValidXmlName(name : mixed) : bool
}
class yii.web.XmlResponseFormatter extends yii.base.Component
class yii.web.XmlResponseFormatter implements yii.web.ResponseFormatterInterface
class yii.web.YiiAsset {
    +depends = [
        \t0 => "yii\web\JqueryAsset"
    ]
    +js = [
        \t0 => "yii.js"
    ]
    +sourcePath = "@yii/assets"
}
class yii.web.YiiAsset extends yii.web.AssetBundle
class m160313_153426_session_init {
    +down()
    +up()
}
class m160313_153426_session_init extends yii.db.Migration
@enduml
